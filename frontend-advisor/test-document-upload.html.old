<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document Upload API Test - SCRUM-46</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 40px auto;
            padding: 20px;
            background: #f5f5f5;
        }
        .container {
            background: white;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .test-section {
            margin: 20px 0;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 4px;
            background: #f9f9f9;
        }
        button {
            background: #007bff;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            margin: 5px;
        }
        button:hover {
            background: #0056b3;
        }
        button:disabled {
            background: #ccc;
            cursor: not-allowed;
        }
        .results {
            margin-top: 10px;
            padding: 10px;
            background: #f8f9fa;
            border-radius: 4px;
            white-space: pre-wrap;
            font-family: monospace;
            font-size: 12px;
        }
        .success { background: #d4edda; color: #155724; }
        .error { background: #f8d7da; color: #721c24; }
        input[type="file"] {
            margin: 10px 0;
            padding: 5px;
        }
        input[type="text"] {
            width: 300px;
            padding: 8px;
            margin: 5px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üß™ Document Upload API Test - SCRUM-46</h1>
        <p><strong>Purpose:</strong> Test the newly implemented document upload API methods</p>
        
        <div class="test-section">
            <h3>1. TypeScript Compilation Test</h3>
            <p>First, check that TypeScript compiles without errors:</p>
            <button onclick="testTypeScript()">Test TypeScript Compilation</button>
            <div id="typescript-results" class="results"></div>
        </div>

        <div class="test-section">
            <h3>2. API Import Test</h3>
            <p>Test that the new API methods are properly imported:</p>
            <button onclick="testApiImports()">Test API Imports</button>
            <div id="import-results" class="results"></div>
        </div>

        <div class="test-section">
            <h3>3. Multi-File Upload Test</h3>
            <p>Test actual file upload with multiple files:</p>
            <input type="file" id="fileInput" multiple accept=".pdf,.docx,.txt">
            <br>
            <input type="text" id="sessionId" placeholder="Session ID (e.g., test_session_123)" value="test_session_123">
            <br>
            <input type="text" id="titles" placeholder="File titles (comma-separated, optional)">
            <br>
            <button onclick="testFileUpload()" id="uploadBtn">Upload Files</button>
            <div id="upload-results" class="results"></div>
        </div>

        <div class="test-section">
            <h3>4. Session Documents Retrieval Test</h3>
            <p>Test retrieving documents for a session:</p>
            <input type="text" id="retrieveSessionId" placeholder="Session ID" value="test_session_123">
            <br>
            <button onclick="testSessionDocuments()">Get Session Documents</button>
            <div id="retrieve-results" class="results"></div>
        </div>

        <div class="test-section">
            <h3>5. Backend Health Check</h3>
            <p>Verify backend is running and endpoints are accessible:</p>
            <button onclick="testBackendHealth()">Check Backend Health</button>
            <div id="health-results" class="results"></div>
        </div>
    </div>

    <script type="module">
        // Test functions
        window.testTypeScript = async function() {
            const resultsDiv = document.getElementById('typescript-results');
            resultsDiv.textContent = 'Testing TypeScript compilation...\n\nPlease run in terminal:\ncd frontend-advisor\nnpm run type-check\n\nOr:\nnpx tsc --noEmit\n\nExpected: No errors related to document upload types';
            resultsDiv.className = 'results';
        }

        window.testApiImports = async function() {
            const resultsDiv = document.getElementById('import-results');
            try {
                resultsDiv.textContent = 'Testing API imports...\n';
                
                // Test that we can import the API
                const { advisorApi } = await import('./lib/api.js');
                
                resultsDiv.textContent += '‚úÖ advisorApi imported successfully\n';
                
                // Test that new methods exist
                if (typeof advisorApi.uploadDocuments === 'function') {
                    resultsDiv.textContent += '‚úÖ uploadDocuments method exists\n';
                } else {
                    resultsDiv.textContent += '‚ùå uploadDocuments method missing\n';
                }
                
                if (typeof advisorApi.getSessionDocuments === 'function') {
                    resultsDiv.textContent += '‚úÖ getSessionDocuments method exists\n';
                } else {
                    resultsDiv.textContent += '‚ùå getSessionDocuments method missing\n';
                }
                
                resultsDiv.className = 'results success';
            } catch (error) {
                resultsDiv.textContent = '‚ùå Import failed: ' + error.message;
                resultsDiv.className = 'results error';
            }
        }

        window.testFileUpload = async function() {
            const resultsDiv = document.getElementById('upload-results');
            const uploadBtn = document.getElementById('uploadBtn');
            const fileInput = document.getElementById('fileInput');
            const sessionId = document.getElementById('sessionId').value;
            const titlesInput = document.getElementById('titles').value;
            
            try {
                uploadBtn.disabled = true;
                resultsDiv.textContent = 'Testing file upload...\n';
                
                if (!fileInput.files || fileInput.files.length === 0) {
                    throw new Error('Please select at least one file');
                }
                
                if (!sessionId) {
                    throw new Error('Please provide a session ID');
                }
                
                const files = Array.from(fileInput.files);
                const titles = titlesInput ? titlesInput.split(',').map(t => t.trim()) : undefined;
                
                resultsDiv.textContent += `Uploading ${files.length} file(s) to session: ${sessionId}\n`;
                if (titles) {
                    resultsDiv.textContent += `Custom titles: ${titles.join(', ')}\n`;
                }
                
                const { advisorApi } = await import('./lib/api.js');
                
                const response = await advisorApi.uploadDocuments(sessionId, files, titles);
                
                resultsDiv.textContent += '\n‚úÖ Upload completed!\n\n';
                resultsDiv.textContent += 'Response:\n';
                resultsDiv.textContent += JSON.stringify(response, null, 2);
                
                resultsDiv.className = 'results success';
            } catch (error) {
                resultsDiv.textContent += '\n‚ùå Upload failed: ' + error.message;
                if (error.response) {
                    resultsDiv.textContent += '\n\nServer response:\n';
                    resultsDiv.textContent += JSON.stringify(error.response.data, null, 2);
                }
                resultsDiv.className = 'results error';
            } finally {
                uploadBtn.disabled = false;
            }
        }

        window.testSessionDocuments = async function() {
            const resultsDiv = document.getElementById('retrieve-results');
            const sessionId = document.getElementById('retrieveSessionId').value;
            
            try {
                resultsDiv.textContent = 'Retrieving session documents...\n';
                
                if (!sessionId) {
                    throw new Error('Please provide a session ID');
                }
                
                const { advisorApi } = await import('./lib/api.js');
                
                const response = await advisorApi.getSessionDocuments(sessionId);
                
                resultsDiv.textContent += '\n‚úÖ Retrieval completed!\n\n';
                resultsDiv.textContent += 'Response:\n';
                resultsDiv.textContent += JSON.stringify(response, null, 2);
                
                resultsDiv.className = 'results success';
            } catch (error) {
                resultsDiv.textContent += '\n‚ùå Retrieval failed: ' + error.message;
                if (error.response) {
                    resultsDiv.textContent += '\n\nServer response:\n';
                    resultsDiv.textContent += JSON.stringify(error.response.data, null, 2);
                }
                resultsDiv.className = 'results error';
            }
        }

        window.testBackendHealth = async function() {
            const resultsDiv = document.getElementById('health-results');
            
            try {
                resultsDiv.textContent = 'Checking backend health...\n';
                
                const { systemApi } = await import('./lib/api.js');
                
                const response = await systemApi.getHealth();
                
                resultsDiv.textContent += '‚úÖ Backend is healthy!\n\n';
                resultsDiv.textContent += 'Response:\n';
                resultsDiv.textContent += JSON.stringify(response.data, null, 2);
                
                // Test document endpoint specifically
                resultsDiv.textContent += '\n\nTesting document upload endpoint accessibility...\n';
                const testResponse = await fetch('http://localhost:8000/api/v1/advisor/documents/upload-file', {
                    method: 'OPTIONS'
                });
                
                if (testResponse.ok) {
                    resultsDiv.textContent += '‚úÖ Document upload endpoint accessible\n';
                } else {
                    resultsDiv.textContent += '‚ùå Document upload endpoint not accessible\n';
                }
                
                resultsDiv.className = 'results success';
            } catch (error) {
                resultsDiv.textContent += '\n‚ùå Backend health check failed: ' + error.message;
                resultsDiv.className = 'results error';
            }
        }
    </script>
</body>
</html>